from typing import TypeVar

EVENT_ACTON_TYPE = TypeVar('EVENT_ACTION', dict, str, list)

AUTHOR = 'Zachary Priddy (me@zpriddy.com)'

# #### SETTINGS ####
FIREFLY_CONFIG_SECTION = 'FIREFLY'
CONFIG_PORT = 'port'
CONFIG_DEFAULT_PORT = 6002
CONFIG_HOST = 'host'
CONFIG_DEFAULT_HOST = 'localhost'
CONFIG_FILE = 'dev_config/firefly.config'

SERVICE_CONFIG_FILE = 'dev_config/services.config'

ALIAS_FILE = 'dev_config/device_alias.json'
DEVICE_FILE = 'dev_config/devices.json'
AUTOMATION_FILE = 'dev_config/automation.json'
ZWAVE_FILE = 'dev_config/zwave.json'

TYPE_ZWAVE_SERVICE = 'zwave_service'


SERVICE_NOTIFICATION = 'FIREFLY_NOTIFICATION_SERVICE'
NOTIFY_DEFAULT = 'DEFAULT'
PRIORITY_NORMAL = 0
PRIORITY_LOW = -1
PRIORITY_HIGH = 1
PRIORITY_EMERGENCY = 2



# #### EVENT TYPES ####
EVENT_TYPE_ANY = 'ANY'
EVENT_TYPE_COMMAND = 'COMMAND'
EVENT_TYPE_UPDATE = 'UPDATE'
EVENT_TYPE_BROADCAST = 'BROADCAST'
EVENT_TYPE_REQUEST = 'REQUEST'

# #### EVENT ACTIONS ####
EVENT_ACTION_ANY = 'ANY'
EVENT_ACTION_ON = 'on'
EVENT_ACTION_OFF = 'off'
EVENT_ACTION_ACTIVE = 'active'
EVENT_ACTION_INACTIVE = 'inactive'
EVENT_ACTION_OPEN = 'open'
EVENT_ACTION_CLOSE = 'close'
EVENT_ACTION_LEVEL = 'level'
EVENT_ACTION_MODE = 'mode'

EVENT_PROPERTY_ANY = 'ANY'


TYPE_AUTOMATION = 'TYPE_AUTOMATION'
TYPE_DEVICE = 'TYPE_DEVICE'
TYPE_SERVICE = 'TYPE_SERVICE'

API_INFO_REQUEST = 'API_INFO_REQUEST'



EVENT_DAWN = 'dawn'
EVENT_SUNRISE = 'sunrise'
EVENT_NOON = 'noon'
EVENT_SUNSET = 'sunset'
EVENT_DUSK = 'dusk'
DAY_EVENTS = [EVENT_DAWN, EVENT_SUNRISE, EVENT_NOON, EVENT_SUNSET, EVENT_DUSK]

# #### COMMAND ACTIONS ####
COMMAND_NOTIFY = 'NOTIFY'
COMMAND_SPEECH = 'SPEECH'
COMMAND_ROUTINE = 'ROUTINE'
COMMAND_SET_LIGHT = 'set_light'

ACTION_OFF = 'off'
ACTION_ON = 'on'
ACTION_TOGGLE = 'toggle'
ACTION_LEVEL = 'level'
ACTION_PRESENT = 'present'
ACTION_NOT_PRESENT = 'not_present'

# #### PRESENCE WITH BEACON ####
ACTION_PRESENT_BEACON = 'BEACON_PRESENT'
ACTION_NOT_PRESENT_BEACON = 'BEACON_NOT_PRESENT'
ACTION_ENABLE_BEACON = 'BEACON_ENABLE'
ACTION_SET_DELAY = 'SET_DELAY'

# #### REQUESTS ####
STATE = 'state'
LEVEL = 'level'
SWITCH = 'switch'
CONTACT = 'contact'
PRESENCE = 'presence'
MOTION = 'motion'
LUX = 'lux'
BEACON_ENABLED = 'BECAON_ENABLED'

NOT_ENABLED = False
ENABLED = True

STATE_CLOSED = 'close'
STATE_OPEN = 'open'



# ### TAG VALUES ###
SWITCH_OFF = EVENT_ACTION_OFF
SWITCH_ON = EVENT_ACTION_ON

CONTACT_CLOSED = STATE_CLOSED
CONTACT_OPEN = STATE_OPEN

MOTION_ACTIVE = EVENT_ACTION_ACTIVE
MOTION_INACTIVE = EVENT_ACTION_INACTIVE



# ### PRESENCE ####
PRESENT = True
NOT_PRESENT = False


# #### DEVICE TYPES ####
DEVICE_TYPE_SWITCH = 'switch'
DEVICE_TYPE_DIMMER = 'dimmer'
DEVICE_TYPE_COLOR_LIGHT = 'COLOR_LIGHT'
DEVICE_TYPE_THERMOSTAT = 'THERMOSTAT'
DEVICE_TYPE_NOTIFICATION = 'NOTIFICATION'
DEVICE_TYPE_MOTION = 'MOTION'
DEVICE_TYPE_PRESENCE = 'PRESENCE'


SOURCE_LOCATION = 'LOCATION'
SOURCE_TRIGGER = 'SOURCE_TRIGGER'

COMMAND_UPDATE = 'UPDATE'

TIME = 'time'


# #### CONDITIONS ####
IS_DARK = 'IS_DARK'
IS_LIGHT = 'IS_LIGHT'
IS_MODE = 'IS_MODE'
IS_NOT_MODE = 'IS_NOT_MODE'
IS_TIME_RANGE = 'TIME_RANGE'
IS_NOT_TIME_RANGE = 'NOT_TIME_RANGE'

COMPONENT_MAP = [
  {
    'type': TYPE_AUTOMATION,
    'file': AUTOMATION_FILE
  },
  {
    'type': TYPE_DEVICE,
    'file': DEVICE_FILE
  }
]

# TODO: This may not be needed
SENSORS = {
  'Energy': 'ENERGY',
  'Previous Reading': 'PREVIOUS READING',
  'Interval': 'INTERVAL',
  'Power': 'POWER',
  'Voltage': 'VOLTAGE',
  'Current': 'CURRENT',
  'Exporting': 'EXPORTING',
  'Sensor': 'SENSOR',
  'Temperature': 'TEMPERATURE',
  'Luminance': 'LUMINANCE',
  'Relative Humidity': 'RELATIVE HUMIDITY',
  'Ultraviolet': 'ULTRAVIOLET'
}